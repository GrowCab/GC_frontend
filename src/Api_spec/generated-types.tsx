/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export const SPEC_VERSION = "v1"; 
export interface Chamber {
  timestamp?: string | null;
  description: string;
  id?: number;
}

export interface Sensor {
  timestamp?: string | null;
  description: string;
  chamber?: Chamber;
  id?: number;
}

export interface Sensor1 {
  timestamp?: string | null;
  description?: string;
  chamber?: Chamber;
  id?: number;
}

export interface Error {
  /**
   * Error message
   */
  message?: string;
  /**
   * Error name
   */
  status?: string;
  /**
   * Error code
   */
  code?: number;
  /**
   * Errors
   */
  errors?: {[key: string]: any};
}

export interface Configuration {
  description: string;
  end?: string | null;
  id?: number;
  start: string;
  chamber_id?: number | null;
}

export interface Configuration1 {
  description?: string;
  end?: string | null;
  id?: number;
  start?: string;
  chamber_id?: number | null;
}

export interface Unit {
  description: string;
  id?: number;
}

export interface ExpectedMeasure {
  expected_value: number;
  start_hour: number;
  end_hour: number;
  configuration_id?: number | null;
  unit_id?: number | null;
  unit?: Unit;
  id?: number;
  end_minute: number;
  start_minute: number;
}

/**
 * Default error response
 */
export type DefaultErrorResponse = Error;

/**
 * Unprocessable Entity
 */
export type UnprocessableEntityResponse = Error;

export type GetSensorsProps = Omit<GetProps<Sensor[], DefaultErrorResponse, void, void>, "path">;

/**
 * Get the list of sensors
 */
export const GetSensors = (props: GetSensorsProps) => (
  <Get<Sensor[], DefaultErrorResponse, void, void>
    path={`/api/sensors`}
    
    {...props}
  />
);

export type UseGetSensorsProps = Omit<UseGetProps<Sensor[], DefaultErrorResponse, void, void>, "path">;

/**
 * Get the list of sensors
 */
export const useGetSensors = (props: UseGetSensorsProps) => useGet<Sensor[], DefaultErrorResponse, void, void>(`/api/sensors`, props);


export type PutSensorProps = Omit<MutateProps<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor1, void>, "path" | "verb">;

/**
 * Stores a new sensor
 * 
 * Each sensor contains an id, description and insertion timestamp
 */
export const PutSensor = (props: PutSensorProps) => (
  <Mutate<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor1, void>
    verb="PUT"
    path={`/api/sensors`}
    
    {...props}
  />
);

export type UsePutSensorProps = Omit<UseMutateProps<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor1, void>, "path" | "verb">;

/**
 * Stores a new sensor
 * 
 * Each sensor contains an id, description and insertion timestamp
 */
export const usePutSensor = (props: UsePutSensorProps) => useMutate<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor1, void>("PUT", `/api/sensors`, props);


export type GetConfigurationsProps = Omit<GetProps<Configuration[], DefaultErrorResponse, void, void>, "path">;

/**
 * Get the list of configurations
 */
export const GetConfigurations = (props: GetConfigurationsProps) => (
  <Get<Configuration[], DefaultErrorResponse, void, void>
    path={`/api/configurations`}
    
    {...props}
  />
);

export type UseGetConfigurationsProps = Omit<UseGetProps<Configuration[], DefaultErrorResponse, void, void>, "path">;

/**
 * Get the list of configurations
 */
export const useGetConfigurations = (props: UseGetConfigurationsProps) => useGet<Configuration[], DefaultErrorResponse, void, void>(`/api/configurations`, props);


export type PutConfigurationProps = Omit<MutateProps<Configuration, UnprocessableEntityResponse | DefaultErrorResponse, void, Configuration1, void>, "path" | "verb">;

/**
 * Stores a new configuration
 */
export const PutConfiguration = (props: PutConfigurationProps) => (
  <Mutate<Configuration, UnprocessableEntityResponse | DefaultErrorResponse, void, Configuration1, void>
    verb="PUT"
    path={`/api/configurations`}
    
    {...props}
  />
);

export type UsePutConfigurationProps = Omit<UseMutateProps<Configuration, UnprocessableEntityResponse | DefaultErrorResponse, void, Configuration1, void>, "path" | "verb">;

/**
 * Stores a new configuration
 */
export const usePutConfiguration = (props: UsePutConfigurationProps) => useMutate<Configuration, UnprocessableEntityResponse | DefaultErrorResponse, void, Configuration1, void>("PUT", `/api/configurations`, props);


export interface GetSensorPathParams {
  sensor_id: number
}

export type GetSensorProps = Omit<GetProps<Sensor, DefaultErrorResponse, void, GetSensorPathParams>, "path"> & GetSensorPathParams;

export const GetSensor = ({sensor_id, ...props}: GetSensorProps) => (
  <Get<Sensor, DefaultErrorResponse, void, GetSensorPathParams>
    path={`/api/sensor/${sensor_id}`}
    
    {...props}
  />
);

export type UseGetSensorProps = Omit<UseGetProps<Sensor, DefaultErrorResponse, void, GetSensorPathParams>, "path"> & GetSensorPathParams;

export const useGetSensor = ({sensor_id, ...props}: UseGetSensorProps) => useGet<Sensor, DefaultErrorResponse, void, GetSensorPathParams>((paramsInPath: GetSensorPathParams) => `/api/sensor/${paramsInPath.sensor_id}`, {  pathParams: { sensor_id }, ...props });


export interface PatchSensorPathParams {
  sensor_id: number
}

export type PatchSensorProps = Omit<MutateProps<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor, PatchSensorPathParams>, "path" | "verb"> & PatchSensorPathParams;

export const PatchSensor = ({sensor_id, ...props}: PatchSensorProps) => (
  <Mutate<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor, PatchSensorPathParams>
    verb="PATCH"
    path={`/api/sensor/${sensor_id}`}
    
    {...props}
  />
);

export type UsePatchSensorProps = Omit<UseMutateProps<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor, PatchSensorPathParams>, "path" | "verb"> & PatchSensorPathParams;

export const usePatchSensor = ({sensor_id, ...props}: UsePatchSensorProps) => useMutate<Sensor, UnprocessableEntityResponse | DefaultErrorResponse, void, Sensor, PatchSensorPathParams>("PATCH", (paramsInPath: PatchSensorPathParams) => `/api/sensor/${paramsInPath.sensor_id}`, {  pathParams: { sensor_id }, ...props });


export type DeleteSensorProps = Omit<MutateProps<void, DefaultErrorResponse, void, string, void>, "path" | "verb">;

export const DeleteSensor = (props: DeleteSensorProps) => (
  <Mutate<void, DefaultErrorResponse, void, string, void>
    verb="DELETE"
    path={`/api/sensor`}
    
    {...props}
  />
);

export type UseDeleteSensorProps = Omit<UseMutateProps<void, DefaultErrorResponse, void, string, void>, "path" | "verb">;

export const useDeleteSensor = (props: UseDeleteSensorProps) => useMutate<void, DefaultErrorResponse, void, string, void>("DELETE", `/api/sensor`, {   ...props });


export interface GetChamberSchedulePathParams {
  configuration_id: number
}

export type GetChamberScheduleProps = Omit<GetProps<ExpectedMeasure[], DefaultErrorResponse, void, GetChamberSchedulePathParams>, "path"> & GetChamberSchedulePathParams;

export const GetChamberSchedule = ({configuration_id, ...props}: GetChamberScheduleProps) => (
  <Get<ExpectedMeasure[], DefaultErrorResponse, void, GetChamberSchedulePathParams>
    path={`/api/chamber_schedule/${configuration_id}`}
    
    {...props}
  />
);

export type UseGetChamberScheduleProps = Omit<UseGetProps<ExpectedMeasure[], DefaultErrorResponse, void, GetChamberSchedulePathParams>, "path"> & GetChamberSchedulePathParams;

export const useGetChamberSchedule = ({configuration_id, ...props}: UseGetChamberScheduleProps) => useGet<ExpectedMeasure[], DefaultErrorResponse, void, GetChamberSchedulePathParams>((paramsInPath: GetChamberSchedulePathParams) => `/api/chamber_schedule/${paramsInPath.configuration_id}`, {  pathParams: { configuration_id }, ...props });

